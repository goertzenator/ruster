// Arbitrary Tuples

use super::*;


//
// The tuple impls here were generated by the Python script below.  I know
// this is possible with Rust macros today, but this script is far simpler.  I will
// revisit this when Rust lands some more advanced macro and generics
// features.
//

//
// The python tuple impl generator
//
// template = """
// impl<{encode_seq}> AsTerm<CTerm> for ({param_seq},) {{
// 	fn as_term(&self, env: &mut Env) -> CTerm {{
// 		let terms = [{arr_seq}];
// 		terms.as_ref().as_term(env)
// 	}}
// }}
// impl<{decode_seq}> FromTerm<CTerm> for ({param_seq},) {{
// 	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {{
// 		let terms:&[CTerm] = try!(term.term_as(env));
// 		FromTerm::from_term(env, terms)
// 	}}
// }}
// impl<'a, {decode_seq}> FromTerm<&'a [CTerm]> for ({param_seq},) {{
// 	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {{
// 		if terms.len() != {param_num} {{ return Err(Error::Badarg) }};
// 		Ok((
// 			{tuple_seq},
// 		))
// 	}}
// }}
// """

// def impl(n):
// 	encode_seq = ", ".join(["T{}: AsTerm<CTerm>".format(i) for i in range(n)])
// 	decode_seq = ", ".join(["T{}: FromTerm<CTerm>".format(i) for i in range(n)])
// 	param_seq  = ", ".join(["T{}".format(i) for i in range(n)])
// 	arr_seq    = ", ".join(["self.{}.as_term(env)".format(i) for i in range(n)])
// 	tuple_seq  = ", ".join(["try!(terms[{}].term_as(env))".format(i) for i in range(n)])
// 	param_num  = n

// 	return template.format(**locals())

// def main():
// 	for n in range(1,33):
// 		print(impl(n))
// main()





// Reference output
// impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1,) {
// 	fn as_term(&self, env: &mut Env) -> CTerm {
// 		let terms = [self.0.as_term(env), self.1.as_term(env)];
// 		terms.as_ref().as_term(env)
// 	}
// }
// impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1,) {
// 	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
// 		let terms:&[CTerm] = try!(term.term_as(env));
// 		FromTerm::from_term(env, terms)
// 	}
// }
// impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1,) {
// 	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
// 		if terms.len() != 2 { return Err(Error::Badarg) };
// 		Ok((
// 			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)),
// 		))
// 	}
// }



// Generated output

impl<T0: AsTerm<CTerm>> AsTerm<CTerm> for (T0,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>> FromTerm<CTerm> for (T0,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 1 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 2 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 3 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 4 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 5 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 6 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 7 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 8 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 9 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 10 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 11 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 12 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 13 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 14 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 15 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 16 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 17 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 18 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 19 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 20 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 21 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 22 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 23 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 24 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 25 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 26 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 27 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>, T27: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env), self.27.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 28 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)), try!(terms[27].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>, T27: AsTerm<CTerm>, T28: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env), self.27.as_term(env), self.28.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 29 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)), try!(terms[27].term_as(env)), try!(terms[28].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>, T27: AsTerm<CTerm>, T28: AsTerm<CTerm>, T29: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env), self.27.as_term(env), self.28.as_term(env), self.29.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 30 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)), try!(terms[27].term_as(env)), try!(terms[28].term_as(env)), try!(terms[29].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>, T27: AsTerm<CTerm>, T28: AsTerm<CTerm>, T29: AsTerm<CTerm>, T30: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env), self.27.as_term(env), self.28.as_term(env), self.29.as_term(env), self.30.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>, T30: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>, T30: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 31 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)), try!(terms[27].term_as(env)), try!(terms[28].term_as(env)), try!(terms[29].term_as(env)), try!(terms[30].term_as(env)),
		))
	}
}


impl<T0: AsTerm<CTerm>, T1: AsTerm<CTerm>, T2: AsTerm<CTerm>, T3: AsTerm<CTerm>, T4: AsTerm<CTerm>, T5: AsTerm<CTerm>, T6: AsTerm<CTerm>, T7: AsTerm<CTerm>, T8: AsTerm<CTerm>, T9: AsTerm<CTerm>, T10: AsTerm<CTerm>, T11: AsTerm<CTerm>, T12: AsTerm<CTerm>, T13: AsTerm<CTerm>, T14: AsTerm<CTerm>, T15: AsTerm<CTerm>, T16: AsTerm<CTerm>, T17: AsTerm<CTerm>, T18: AsTerm<CTerm>, T19: AsTerm<CTerm>, T20: AsTerm<CTerm>, T21: AsTerm<CTerm>, T22: AsTerm<CTerm>, T23: AsTerm<CTerm>, T24: AsTerm<CTerm>, T25: AsTerm<CTerm>, T26: AsTerm<CTerm>, T27: AsTerm<CTerm>, T28: AsTerm<CTerm>, T29: AsTerm<CTerm>, T30: AsTerm<CTerm>, T31: AsTerm<CTerm>> AsTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31,) {
	fn as_term(&self, env: &mut Env) -> CTerm {
		let terms = [self.0.as_term(env), self.1.as_term(env), self.2.as_term(env), self.3.as_term(env), self.4.as_term(env), self.5.as_term(env), self.6.as_term(env), self.7.as_term(env), self.8.as_term(env), self.9.as_term(env), self.10.as_term(env), self.11.as_term(env), self.12.as_term(env), self.13.as_term(env), self.14.as_term(env), self.15.as_term(env), self.16.as_term(env), self.17.as_term(env), self.18.as_term(env), self.19.as_term(env), self.20.as_term(env), self.21.as_term(env), self.22.as_term(env), self.23.as_term(env), self.24.as_term(env), self.25.as_term(env), self.26.as_term(env), self.27.as_term(env), self.28.as_term(env), self.29.as_term(env), self.30.as_term(env), self.31.as_term(env)];
		terms.as_ref().as_term(env)
	}
}
impl<T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>, T30: FromTerm<CTerm>, T31: FromTerm<CTerm>> FromTerm<CTerm> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31,) {
	fn from_term(env: &mut Env, term: CTerm) -> Result<Self> {
		let terms:&[CTerm] = try!(term.term_as(env));
		FromTerm::from_term(env, terms)
	}
}
impl<'a, T0: FromTerm<CTerm>, T1: FromTerm<CTerm>, T2: FromTerm<CTerm>, T3: FromTerm<CTerm>, T4: FromTerm<CTerm>, T5: FromTerm<CTerm>, T6: FromTerm<CTerm>, T7: FromTerm<CTerm>, T8: FromTerm<CTerm>, T9: FromTerm<CTerm>, T10: FromTerm<CTerm>, T11: FromTerm<CTerm>, T12: FromTerm<CTerm>, T13: FromTerm<CTerm>, T14: FromTerm<CTerm>, T15: FromTerm<CTerm>, T16: FromTerm<CTerm>, T17: FromTerm<CTerm>, T18: FromTerm<CTerm>, T19: FromTerm<CTerm>, T20: FromTerm<CTerm>, T21: FromTerm<CTerm>, T22: FromTerm<CTerm>, T23: FromTerm<CTerm>, T24: FromTerm<CTerm>, T25: FromTerm<CTerm>, T26: FromTerm<CTerm>, T27: FromTerm<CTerm>, T28: FromTerm<CTerm>, T29: FromTerm<CTerm>, T30: FromTerm<CTerm>, T31: FromTerm<CTerm>> FromTerm<&'a [CTerm]> for (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31,) {
	fn from_term(env: &mut Env, terms: &[CTerm]) -> Result<Self> {
		if terms.len() != 32 { return Err(Error::Badarg) };
		Ok((
			try!(terms[0].term_as(env)), try!(terms[1].term_as(env)), try!(terms[2].term_as(env)), try!(terms[3].term_as(env)), try!(terms[4].term_as(env)), try!(terms[5].term_as(env)), try!(terms[6].term_as(env)), try!(terms[7].term_as(env)), try!(terms[8].term_as(env)), try!(terms[9].term_as(env)), try!(terms[10].term_as(env)), try!(terms[11].term_as(env)), try!(terms[12].term_as(env)), try!(terms[13].term_as(env)), try!(terms[14].term_as(env)), try!(terms[15].term_as(env)), try!(terms[16].term_as(env)), try!(terms[17].term_as(env)), try!(terms[18].term_as(env)), try!(terms[19].term_as(env)), try!(terms[20].term_as(env)), try!(terms[21].term_as(env)), try!(terms[22].term_as(env)), try!(terms[23].term_as(env)), try!(terms[24].term_as(env)), try!(terms[25].term_as(env)), try!(terms[26].term_as(env)), try!(terms[27].term_as(env)), try!(terms[28].term_as(env)), try!(terms[29].term_as(env)), try!(terms[30].term_as(env)), try!(terms[31].term_as(env)),
		))
	}
}
